from qiskit import QuantumCircuit, transpile
from qiskit.circuit.instruction import math
from qiskit.providers import Backend, BackendV1, BackendV2

from dqcmap.basecompiler import BaseCompiler, _CircuitsT
from dqcmap.circuit_prop import CircProperty
from dqcmap.controller import ControllerConfig, MapStratety
from dqcmap.mappers import mapping
from dqcmap.passes.managers import generate_dqcmap_pass_manager
from dqcmap.pruners import virtual_prune


class MultiCtrlCompiler(BaseCompiler):
    """
    Compile a qc across regions controlled by different controllers

    It will try to avoid cross-controller feedback
    """

    def __init__(self, ctrl_conf: ControllerConfig):
        super().__init__(ctrl_conf)
        assert ctrl_conf.strategy is MapStratety.CONNECT
        self._sg_nodes_lst = self._construct_sg_nodes_lst(ctrl_conf)

    def _construct_sg_nodes_lst(self, ctrl_conf: ControllerConfig):
        """Transform ``ctrl_to_pq`` to list of subgraphs"""
        sg_nodes_lst = []
        for _, sg_nodes in ctrl_conf.ctrl_to_pq.items():
            sg_nodes_lst.append(sg_nodes)
        assert all(isinstance(sg_nodes, list) for sg_nodes in sg_nodes_lst)
        return sg_nodes_lst

    def run(
        self,
        qc: QuantumCircuit,
        backend: Backend,
        initial_layout=None,
        layout_method=None,
        routing_method=None,
        seed_transpiler=None,
        opt_level=1,
        heuristic="dqcmap",
    ) -> _CircuitsT:
        """
        opt_level (int):
            1 | 2 | 4 | 5: deprecated levels
            3: use initial_layout generated by dqcmap mappers
            6: use multiple initial_layouts generated by dqcmap mappers as sabre_starting_layouts for dqcmap layout pass
        """
        if isinstance(backend, BackendV1):
            cm = backend.configuration().coupling_map
        elif isinstance(backend, BackendV2):
            cm = backend.coupling_map
        else:
            raise ValueError(f"Unknown backend type: {backend}")

        # Parameters that are maybe modified by dqcmap compiler
        # and input to qiskit transpiler
        coupling_map = None
        initial_layout = None
        circ_prop = CircProperty(qc)

        if opt_level == 1:
            coupling_map = virtual_prune(cm, self._sg_nodes_lst)
        elif opt_level == 2:
            coupling_map = virtual_prune(
                cm, self._sg_nodes_lst, pruning_method="trivial_v2", prob=0.5
            )
        elif opt_level == 3:
            # 1. mapping
            initial_layout = mapping(self._conf, circ_prop, mapper_name="kl_partition")
            # initial_layout = mapping(self._conf, circ_prop, mapper_name="heuristic")
            # initial_layout = mapping(self._conf, circ_prop, mapper_name="two_step")
        elif opt_level == 4:
            # 1. mapping
            initial_layout = mapping(self._conf, circ_prop, mapper_name="heuristic")
            # 2. pruning
            coupling_map = virtual_prune(
                cm, self._sg_nodes_lst, pruning_method="trivial_v2", prob=0.1
            )
        elif opt_level == 5:
            # 1. mapping
            initial_layout = mapping(self._conf, circ_prop, mapper_name="heuristic")
            # 2. pruning
            coupling_map = virtual_prune(
                cm,
                self._sg_nodes_lst,
                pruning_method="map_aware",
                prob=0.1,
                mapping=initial_layout,
                multi_op_list=circ_prop.multi_op_list,
            )
        elif opt_level == 6:
            # tqcs = []
            # initial_layouts = mapping(self._conf, circ_prop, mapper_name="two_step") # 20 iterations
            # for initial_layout in initial_layouts:
            #     pm = generate_dqcmap_pass_manager(
            #         optimization_level=1,
            #         backend=backend,
            #         initial_layout=initial_layout,
            #         coupling_map=coupling_map,
            #         layout_method=layout_method,
            #         routing_method=routing_method,
            #         seed_transpiler=seed_transpiler,
            #         ctrl_conf=self._conf,
            #         circ_prop=circ_prop,
            #         heuristic=heuristic,
            #     )

            #     tqc = pm.run(qc)
            #     tqcs.append(tqc)
            # return min(tqcs, key=lambda tqc: len(tqc))

            initial_layouts = mapping(self._conf, circ_prop, mapper_name="two_step")
            # initial_layouts = [
            #     mapping(self._conf, circ_prop, mapper_name="kl_partition")
            #     for _ in range(1)
            # ]

            pm = generate_dqcmap_pass_manager(
                optimization_level=1,
                backend=backend,
                initial_layout=None,
                coupling_map=coupling_map,
                layout_method=layout_method,
                routing_method=routing_method,
                seed_transpiler=seed_transpiler,
                ctrl_conf=self._conf,
                circ_prop=circ_prop,
                heuristic=heuristic,
                sabre_starting_layouts=initial_layouts,
            )

            tqc = pm.run(qc)
            return tqc
        else:
            raise NotImplementedError(f"Unsupported optimization level {opt_level}")

        if initial_layout is not None:
            # cif_pairs passed to later stages should represent initial layout
            circ_prop.layout_cif_pairs(initial_layout)

        pm = generate_dqcmap_pass_manager(
            optimization_level=1,
            backend=backend,
            initial_layout=initial_layout,
            coupling_map=coupling_map,
            layout_method=layout_method,
            routing_method=routing_method,
            seed_transpiler=seed_transpiler,
            ctrl_conf=self._conf,
            circ_prop=circ_prop,
            heuristic=heuristic,
        )

        # print(f"Initial layout is set as: {initial_layout}")

        tqc = pm.run(qc)

        # print(
        #     f"Transpiled layout:\n{tqc._layout.initial_virtual_layout(filter_ancillas=True)}\n{tqc._layout.final_virtual_layout(filter_ancillas=True)}"
        # )
        return tqc
